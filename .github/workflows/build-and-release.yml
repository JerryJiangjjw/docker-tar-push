name: Build and Release

on:
  push:
    tags:
      - '*'
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows, darwin]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.20'

      - name: Build binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
          CGO_ENABLED: 0
        run: |
          mkdir -p dist
          OUTPUT_NAME=docker-tar-push
          if [ "${{ matrix.goos }}" = "windows" ]; then
            OUTPUT_NAME=docker-tar-push.exe
          fi
          go build -ldflags="-s -w" -o dist/${OUTPUT_NAME} cmd/docker-tar-push/main.go
          # Copy documentation files
          cp README.md LICENSE dist/

      - name: Create archive
        run: |
          cd dist
          if [ "${{ matrix.goos }}" = "windows" ]; then
            zip docker-tar-push-${{ matrix.goos }}-${{ matrix.goarch }}.zip docker-tar-push.exe README.md LICENSE
          else
            tar -czvf docker-tar-push-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz docker-tar-push README.md LICENSE
          fi

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: docker-tar-push-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            ${{ matrix.goos == 'windows' && 'dist/*.zip' || 'dist/*.tar.gz' }}
          if-no-files-found: error
          compression-level: 6
          overwrite: false

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create Release for Tags
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: artifacts/**/*
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
